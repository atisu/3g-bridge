3G Bridge MetaJob plugin: Submitting a batch of jobs to 3G Bridge
=================================================================

1. What is it?
--------------

The MetaJob feature enables the users of the 3G Bridge to submit a batch of jobs
(a parameter study) in a single submission. There are (at least) two cases where
this feature can come in handy:

   i) When jobs are to be submitted to 3G Bridge through another middleware
     (gLite for example). Using the MetaJob feature, thousands of jobs can be
      submitted at once to avoid the overhead of the middleware.

      A single job is submitted (1) through gLite. The batch is unfolded only in
      the 3G Bridge, then sub-jobs (*) are submitted to the destination grid
      individually:

	  User -(1)-> gLite -(1)-> 3GBridge =(*)=> [WorkerNodes]

  ii) As the status information of the sub-jobs are gathered and processed by
      the Metajob plugin internally, the user doesn't have to poll thousands of
      her jobs individually.

2. Glossary
-----------

meta-job:
	A meta-job is a job submitted to 3G Bridge with a special extra input
	file containing job definitions. The name of the file must start with
	_3gb-metajob (this identifies a meta-job). In this document, we will
	always refer to this file as the "_3gb-metajob file" although its name
	can be suffixed with anything. When submitting a meta-job, only one
	_3gb-metajob file can be specified.

_3gb-metajob file:
	The file containing job definitions and directives for
	batch-execution. This file is supplied as an extra input file and
	interpreted by the 3G Bridge.

sub-job:
	Job generated by 3G Bridge from a meta-job.

3. Requirements
---------------

  o The usual reuirements for 3G Bridge
  o Meta-job enabled database:
	The basic 3G Bridge database can be extended using the
	db/schema-add-metajob.sql script.

It is assumed that the reader knows and understands ordinary job-submission
using wsclient.

4. How to use it?
-----------------

  4.1 Restrictions
  ----------------

  The MetaJob feature supports parameter studies only. That is, only the
  arguments and sources of the input files can vary among sub-jobs. The
  executable, the destination grid, the output files' names and the input ports
  defined by the local names of specified inputs are fixed.

  In the following example of meta-job submission <<.>> marks variable
  parameters. Everything else will be inherited by sub-jobs.

  <example>
  wsclient -m add -e http://3gb-host.org:8091         \
	   -n algName -g DestGrid                     \
	   -o 'output.txt'                            \
	   -a '<< default args >>'                    \
	   -i 'input1=<< Url_for_input1_1 >>'         \
	   -i 'input2=<< Url_for_input2_1 >>'         \
	   -i '_3gb-metajob=Url_for_3gb_metajob_file'
  </example>

  Notice that only the URL of input specs are marked with <<.>> The set of input
  ports (here: { input1, input2 }) is fixed. All sub-jobs will have the same
  input files, only with different source URLs.

  As the meta-job plugin has no acces to the user's machine, specifying local
  files for the sub-jobs as inputs is impossible. Therefore, all input files
  must be specified as a remote file - with a URL. This means that before
  submitting the meta-job, all input files referenced in the _3gb-metajob file
  must be made available on a server.

  Although the _3gb-metajob file itself can be a local file, which the wsclient
  will send to the webservice, it's practical to specify it as a remote file
  too, especially if it's big. It's probably more efficient to download a big
  file from a server than from the user's personal computer, also, the user will
  not have to wait long for the wsclient command to finish.

  4.2 The _3gb-metajob file
  -------------------------

  The _3gb-metajob file contains the definitions of sub-jobs in a procedural
  form:

    # Example _3gb-metajob file

    %Required 80%
    %SuccessAt 60%

    %Comment 22_1_1
    Arguments = -f 22
    Input = input1.txt=http://url.for/input1_1.txt=md5=size
    Input = input2.txt=http://url.for/input2_1.txt=md5=size
    Queue 2

    %Comment 22_1_2
    Arguments = -f 22
    Input = input2.txt=http://url.for/input2_1.txt=md5=size
    Queue

    %Comment 444_1_2
    Arguments = -f 444
    Queue

  The meta-job definition language is case sensitive.

  Each line contains a single instruction, instructions cannot be split in
  multiple lines. An instruction starting with a % is called a directive. (They
  are emphasized because they are handled specially.)

  Full-line comments begin with a '#'.
  WARNING! There are only full-line comments. For example the instruction
    Argument = -f 22 # 33
  will set the Argument to '-f 22 # 33' instead of '-f 22'.

  Furthermore, quotes are not treated specially. They will be included in the
  argument string or the URL-s as they are.

  4.3 Specifying sub-jobs
  -----------------------

  Jobs have the following attributes:
       a) algorithm, destination grid, outputs
       b) list of logical input file names
       c) for each input file, a url
       d) arguments

  These define a template for sub-jobs.

  For every sub-job, a) and b) is the same. These fixed parameters are specified
  by the wsclient call.

  Arguments and source URLs for the input files are specified the following way:
   i) They get default values from the wsclient call.
  ii) Values can be changed by instructions in the _3gb-metajob file:
      - Arguments = *
	    will set the arguments to *, where * is the string between the '='
	    and the end-of-line.
      - Input = logicalName=URL
	    will set the source URL for the input port 'logicalName' to the
	    given URL. The logical name must be in the fixed set b).

  Whenever a Queue instruction is issued, a sub-job is instantiated from the
  current state of the template. A Queue N instruction will create N identical
  sub-jobs.

  See example in 4.2

  4.4 Letting the 3G Bridge to poll sub-jobs
  ------------------------------------------

  Polling each sub-job individually with wsclient is cumbersome and
  inefficient. The %Required and %SuccessAt directives can be used to control
  how 3G Bridge interprets sub-job statuses. The meta-job's status will be set
  accordingly, so the user will only have to poll the meta-job.

  %Required tells the 3G Bridge how many sub-jobs are needed at least for the
   meta-job to be successful. If too many sub-jobs have failed, the meta-job
   will fail too.

  %SuccessAt tells the 3G Bridge how many sub-jobs are needed at most for the
   meta-job to be successful. If this many sub-jobs finish successfully, all
   remaining (failed, running, not submitted) sub-jobs are canceled and deleted
   as they are considered unneeded.

  Both directives can be specified as an exact number or a percentage.

  They are optional, the default value for both is 100%.

  4.?? Getting the output of sub-jobs
  -----------------------------------

  TODO

  4.?? Identifying sub-jobs
  ------------------------

  The %Comment directive specifies a user-comment on a set of parameters. After
  generating a sub-job, the 3G Bridge assigns this comment with the generated
  sub-job's unique identifier. The only purpose of this is to enable the user to
  identify sub-jobs: which unique id belongs to which set of parameters. This
  instruction is a directive, because its value is not stored like,
  e.g. Argument: after the next Queue command, the %Comment will be reset:

       %Required 33%
       %SuccessAt 66%

       %Comment job_with_arg_22
       Arguments = 22
       Input = input1=url_for_input1
       Queue 2

       # Here, %Comment is ''; it must be explicitly set
       Arguments = 33
       Queue

  After sub-jobs has been generated, a mapping file is created by the 3G
  Bridge. This file is a valid _3gb-metajob file, semantically equivalent to the
  one the user submitted. The difference is that each generated sub-job has a
  full, explicit definition (before each Queue, all inputs and arguments are set
  explicitly), %Required and %SuccessAt is converted to specific numbers, and
  each sub-job is annotated with its 3G Bridge identifier. The example above
  will result in the following mapping:

       %Comment job_with_arg_22
       %Id subjob-uuid-1
       Arguments = 22
       Input = input1=url_for_input1
       Queue

       %Comment job_with_arg_22
       %Id subjob-uuid-2
       Arguments = 22
       Input = input1=url_for_input1
       Queue

       %Comment
       %Id subjob-uuid-3
       Arguments = 33
       Input = input1=url_for_input1
       Queue

       %Required 1
       %SuccessAt 2
       # Total generated: 3

  This mapping can be submitted back to 3G Bridge with the same effect as the
  original. %Id directives are valid, they're completely omitted.


  4.?? Using the MetaJob feature through gLite
  --------------------------------------------

  TODO

??. Configuring
--------------

TODO

In the 3G Bridge configuration file, the Metajob plugin must be associated with
the MetaJob grid:

<example>
#######################################################################
# Sample grid using the Metajob plugin
[MetaJob]
disable = false
handler = Metajob
maxJobsAtOnce = 100
</example>

When











< RECYCLE BIN >


<example JDL to be submitted through EGEE>

Executable	= "dsp";
Arguments	= "<< Default arguments >>";
InputSandbox	= {
			"gsiftp://hosszu.url/dsp",
		  	"input1.txt",
			"input2.txt",
			"_3gb-metajob"
		};
OutputSandbox	= {"output.txt"};

</example>

The _3gb-metajob file does not need to have a URL, it can be a local


{
	Grid=DestGrid,
	AlgName=algName,
	Args=[],
	Outputs={output.txt},
	input1_Source=[],
	input2_Source=[]
}

Placeholders [] are initialized with default values from the wsclient call. Only
these values can be changed in the _3gb-metajob file. The structure of this
template and other values in it are fixed.
